#!/bin/bash

if [ -z "$1" ]; then
  if [ -w /dev/stderr ]; then
    echo 'No parameter #1 detected.  Aborting.' > /dev/stderr
  fi
  exit 1
fi

if [ -z "$2" ]; then
  if [ -w /dev/stderr ]; then
    echo 'No parameter #2 detected.  Aborting.' > /dev/stderr
  fi
  exit 2
fi

# on some BSDs, e.g. Mac OS X 10.6, "readlink" is almost useless and "realpath" is totally absent  :-(
# <https://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac> is the source of the Perl one-liner _and_ has lots of alternatives
function resolve_links {
  perl -MCwd -le 'print Cwd::abs_path shift' "$1"
}

where_to_search="$PATH" # the usual, which should work great _if_ we are _not_ in an active VE
if [ -n "$VIRTUAL_ENV" ]; then # gotta respect the VE, or else Bad Things™ may happen
  where_to_search=`echo $PATH | tr : '\n' | grep "^$VIRTUAL_ENV" | tr '\n' :` # _intentionally_ not «grep "^$VIRTUAL_ENV/"» in case the trailing slash is already in the value of "$VIRTUAL_ENV"
fi
if [ -n "$DEBUG" ] && [ "$DEBUG" -gt 5 ] && [ -w /dev/stderr ]; then
  echo "terry: where_to_search: ''$where_to_search''" > /dev/stderr
fi

find_results=$(find `echo $where_to_search | tr ':' ' '` -maxdepth 1 | egrep ".*/($1)\$")
if [ -n "$DEBUG" ] && [ "$DEBUG" -gt 5 ] && [ -w /dev/stderr ]; then
  echo terry: find_results: $find_results > /dev/stderr
fi

if [ -n "$VIRTUAL_ENV" ]; then # VEs do Bad Things™ with symlinks to a/the Python interpreter, at least as of this writing
  pythons_to_try=`echo     $find_results                              | sort -u`
else
  pythons_to_try=`for a in $find_results; do resolve_links "$a"; done | sort -u`
fi

if [ -n "$DEBUG" ] && [ "$DEBUG" -gt 5 ] && [ -w /dev/stderr ]; then
  echo terry: pythons_to_try: $pythons_to_try > /dev/stderr
fi

if [ -z "$pythons_to_try" ]; then
  if [ -w /dev/stderr ]; then
    echo "terry: No compatible Python interpreters found for specification string \"$1\".  Aborting." > /dev/stderr
  fi
  exit 3
fi

shift

chosen=$(for executable in $(for py in $(sha512sum $pythons_to_try 2>/dev/null | sort -u -k1,1 | sed 's/^.* //'); do echo `$py -c 'import sys; print (sys.version, "//", sys.version_info, "// VALID")' 2>/dev/null` // $py; done | grep VALID | sed "s/^('//" | sort -n -r -k1,1 | sed 's,^.*// ,,'); do if $executable -c "compile(open('$1').read(),'','exec')" 2>/dev/null; then echo $executable; break; fi; done)

if [ -n "$chosen" ]; then
  if [ -n "$DEBUG" ] && [ "$DEBUG" -gt 1 ] && [ -w /dev/stderr ]; then
    echo terry: Chosen Python for \"$1\": \"$chosen\" > /dev/stderr
  fi
else
  if [ -w /dev/stderr ]; then
    echo "terry: No compatible Python interpreter found for \"$1\".  Aborting." > /dev/stderr
  fi
  exit 4
fi

$chosen "$@"

